Groovy (see <a href="http://groovy.codehaus.org/" target="_blank">http://groovy.codehaus.org/</a>) is a programming language which runs on the JVM (Java Virtual Machine). Any computer or device that can run Java programs can also run programs written in Groovy. Groovy enhances the Java programming language in many ways. I won't go into them all here but for anyone who develops in Java I would recommend checking it out for its expressiveness, power, and speed of development.

In version 2 of Groovy there is a new mechanism for adding extensions to pre-existing classes. Groovy uses the same mechanism to extend some of Java's classes. This is the mechanism I used to write my extensions library. You can find more information at <a href="http://groovy.codehaus.org/Groovy+2.0+release+notes#Groovy2.0releasenotes-Extensionmodules" target="_blank">http://groovy.codehaus.org/Groovy+2.0+release+notes#Groovy2.0releasenotes-Extensionmodules</a>. I used <a href="https://twitter.com/tim_yates" target="_blank">Tim Yates</a>' <a href="https://github.com/timyates/groovy-common-extensions" target="_blank">groovy-common-extensions library</a> as an example of this sort of extension library and based some of my build code from there. It has some interesting extensions itself and is worth checking out.

<h3>Groovy Lists</h3>
One of the features Groovy provides is a number of extensions to many of the common Java classes and interfaces. For example the List class has been given the following methods:

<dl><dt><code>first()</code></dt><dd>Returns the first element of the List.</dd><dt><code>last()</code></dt><dd>Returns the last element of the List.</dd><dt><code>head()</code></dt><dd>Returns the first element of the List (aka the 'head' of the list).</dd><dt><code>tail()</code></dt><dd>Returns the remaining elements of the list, ignoring the 'head'.</dd></dl>
<br>
<p>I find these extremely useful. They make the code read much better; consider the following alternatives:
<code>Player nextPlayer = allPlayers[0]</code>
or
<code>Player nextPlayer = allPlayers.first()</code>
I find the second option much more expressive and requires less mental energy to understand what is going on.</p>


<h3>My own contribution: only()</h3>
I find using <code>first()</code>, <code>last()</code>, etc. to be very expressive. But I felt there was an additional case which wasn't really handled. My theory is that there are times when you know that there will only be one element in a List. Consider this example using a fictional SqlUtility which returns a List of results representing the rows:
<code>
def results = SqlUtility.execute('SELECT TOP 1 * FROM players;')
</code>
Here we know that will only be one element in the List (<code>results</code>) and that it is the element that we are interested in. We could get the element we know like so:
<code>def firstPlayer = results.first()</code>
The problem I see with this is that it doesn't convey the knowledge we have that there will only be one element. Someone could reasonably see this code and think to themselves <em>we're getting the first result, what about the rest?</em>. Of course when they see the SQL they'll realise that there is only the one element, but this line of code could convey this information too and there wouldn't be any hesitation and needing to look back at earlier code. This is the reason I added the <code>only()</code> method to Groovy Lists. Our code can now be written as this:
<code>def firstPlayer = results.only()</code>

It follows the same semantics as the other List methods I've mentioned. It will throw a NoSuchElementException if the List is empty. It will also throw a MoreThanOneElementException if there is more than one element in the List. Both of these Exceptions could be used to handle the case where your program isn't doing what it should be doing.

I understand that not everyone will like this new behaviour; particularly the checks that are performed. The other List methods (and my only() method) throw a NoSuchMethodExtension to indicate when they <em>can't do their job</em>. This is very different from the reason that my only() method throws a MoreThanOneElementException. At this point my function is <em>verifying that the program is in a certain state</em>. This is the same thing you would normally achieve with an assert statement. So not everyone would like to have this sort of verification hidden in a method like this. But, I suppose, those people don't need to download and use my extension library.

<h3>More info</h3>
The GitHub repo for the library: <a href="https://github.com/dnahodil/groovy-extra-list-behaviour" target="_blank">https://github.com/dnahodil/groovy-extra-list-behaviour</a>
I will be making more posts following this. One to explain some other functions which were added, and another about how to use my extension library in a Grails application.